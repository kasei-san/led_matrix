# encoding: utf-8
require "led_dataset"

describe LedDataSet do

  subject { LedDataSet.new("aæ¼¢") }

  describe '#next' do
    it 'should return next data' do
      subject.next.should == [
        0b0000000000010000,
        0b0000000000001000,
        0b0000000000001111,
        0b0000000000000000,
        0b0000000001000000,
        0b0011110000100011,
        0b0100001000100010,
        0b0000001000000010,
        0b0011111000001011,
        0b0100001000001000,
        0b1000001000010011,
        0b1000001000010000,
        0b1000011000100111,
        0b0111101000100000,
        0b0000000001000001,
        0b0000000001000110
      ]

      subject.next.should == [
        0b0000000000100001,
        0b0000000000010001,
        0b0000000000011111,
        0b0000000000000001,
        0b0000000010000000,
        0b0111100001000111,
        0b1000010001000100,
        0b0000010000000100,
        0b0111110000010111,
        0b1000010000010000,
        0b0000010000100111,
        0b0000010000100000,
        0b0000110001001111,
        0b1111010001000000,
        0b0000000010000011,
        0b0000000010001100
      ]
    end


    it 'edge data test' do
      0.upto(21) do
        subject.next
      end

      subject.next.should == [
        0b00,
        0b00,
        0b11,
        0b00,
        0b00,
        0b10,
        0b10,
        0b10,
        0b10,
        0b00,
        0b00,
        0b00,
        0b11,
        0b00,
        0b00,
        0b11,
      ]
    end
  end

  describe '#current' do
    it 'first #current should return first data' do
      subject.current.should == [
        0b0000000000010000,
        0b0000000000001000,
        0b0000000000001111,
        0b0000000000000000,
        0b0000000001000000,
        0b0011110000100011,
        0b0100001000100010,
        0b0000001000000010,
        0b0011111000001011,
        0b0100001000001000,
        0b1000001000010011,
        0b1000001000010000,
        0b1000011000100111,
        0b0111101000100000,
        0b0000000001000001,
        0b0000000001000110
      ]
    end

    it '#current should change next data' do
      expect{
        subject.next
      }.to change{
        subject.current
      }.from([
        0b0000000000010000,
        0b0000000000001000,
        0b0000000000001111,
        0b0000000000000000,
        0b0000000001000000,
        0b0011110000100011,
        0b0100001000100010,
        0b0000001000000010,
        0b0011111000001011,
        0b0100001000001000,
        0b1000001000010011,
        0b1000001000010000,
        0b1000011000100111,
        0b0111101000100000,
        0b0000000001000001,
        0b0000000001000110
      ]).to([
        0b0000000000100001,
        0b0000000000010001,
        0b0000000000011111,
        0b0000000000000001,
        0b0000000010000000,
        0b0111100001000111,
        0b1000010001000100,
        0b0000010000000100,
        0b0111110000010111,
        0b1000010000010000,
        0b0000010000100111,
        0b0000010000100000,
        0b0000110001001111,
        0b1111010001000000,
        0b0000000010000011,
        0b0000000010001100
      ])
    end
  end

  it '#reset' do
    0.upto(21) do
      subject.next
    end
    subject.reset

    subject.current.should == [
      0b0000000000010000,
      0b0000000000001000,
      0b0000000000001111,
      0b0000000000000000,
      0b0000000001000000,
      0b0011110000100011,
      0b0100001000100010,
      0b0000001000000010,
      0b0011111000001011,
      0b0100001000001000,
      0b1000001000010011,
      0b1000001000010000,
      0b1000011000100111,
      0b0111101000100000,
      0b0000000001000001,
      0b0000000001000110
    ]
  end
end
